// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220117140556_add-seed-data")]
    partial class addseeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ApplicationCore.Entity.AccountConfirmationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountConfirmationRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AdminAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdminAccounts");

                    b.HasData(
                        new
                        {
                            Id = 5024,
                            DateCreated = new DateTime(2022, 1, 17, 21, 5, 55, 266, DateTimeKind.Local).AddTicks(3225),
                            IsSuperAdmin = true,
                            PasswordHash = new byte[] { 243, 165, 167, 186, 5, 32, 181, 209, 186, 79, 82, 56, 227, 32, 140, 166, 160, 85, 192, 34, 165, 88, 224, 72, 142, 47, 94, 34, 197, 69, 249, 44, 13, 44, 239, 246, 97, 154, 168, 158, 218, 161, 26, 65, 231, 207, 92, 108, 207, 116, 109, 42, 9, 250, 124, 5, 255, 162, 79, 187, 16, 180, 83, 140 },
                            PasswordSalt = new byte[] { 194, 1, 65, 44, 198, 150, 35, 229, 252, 233, 3, 22, 67, 90, 106, 109, 213, 159, 64, 118, 184, 134, 5, 134, 1, 87, 77, 189, 151, 68, 29, 22, 219, 88, 205, 9, 186, 186, 46, 235, 15, 202, 138, 205, 203, 174, 159, 66, 65, 250, 247, 6, 145, 59, 52, 240, 94, 57, 29, 220, 25, 86, 55, 185, 127, 169, 168, 106, 24, 242, 61, 227, 208, 238, 241, 94, 250, 233, 56, 154, 108, 230, 127, 91, 243, 108, 81, 2, 137, 146, 47, 248, 62, 91, 171, 60, 49, 148, 219, 116, 98, 89, 210, 157, 61, 171, 158, 112, 28, 244, 229, 164, 134, 85, 6, 116, 207, 100, 39, 3, 140, 189, 11, 75, 247, 88, 196, 230 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            ClassId = 2024,
                            Name = "Assignment 1 for the blind",
                            Priority = 100,
                            Weight = 4
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("RequestState")
                        .HasColumnType("integer");

                    b.Property<int>("RequestedNewPoint")
                        .HasColumnType("integer");

                    b.Property<int>("StudentAssignmentGradeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentAssignmentGradeId");

                    b.ToTable("AssignmentGradeReviewRequests");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            DateCreated = new DateTime(2022, 1, 17, 21, 5, 55, 268, DateTimeKind.Local).AddTicks(2780),
                            Description = "I want to raise to point to 100",
                            RequestState = 2,
                            RequestedNewPoint = 100,
                            StudentAssignmentGradeId = 2024
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("InviteStringStudent")
                        .HasColumnType("text");

                    b.Property<string>("InviteStringTeacher")
                        .HasColumnType("text");

                    b.Property<int?>("MainTeacherId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainTeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            Description = "Math for the blind, you don't need an eye",
                            InviteStringStudent = "ABCDEFGHIKLM",
                            InviteStringTeacher = "KJHGFDAQWERT",
                            Name = "Math for the blind",
                            Room = "F201",
                            StartDate = new DateTime(2022, 1, 17, 21, 5, 55, 266, DateTimeKind.Local).AddTicks(8346)
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassStudentsAccount", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "StudentAccountId");

                    b.HasIndex("StudentAccountId");

                    b.ToTable("ClassStudentsAccounts");

                    b.HasData(
                        new
                        {
                            ClassId = 2024,
                            StudentAccountId = 2024,
                            Id = 2024
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassTeachersAccount", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassTeachersAccounts");

                    b.HasData(
                        new
                        {
                            ClassId = 2024,
                            TeacherId = 2023,
                            Id = 2024
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.GradeReviewReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignmentGradeReviewRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentGradeReviewRequestId");

                    b.HasIndex("ReplierId");

                    b.ToTable("GradeReviewReply");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            AssignmentGradeReviewRequestId = 2024,
                            Content = "Ok I will take a look",
                            DateTime = new DateTime(2022, 1, 17, 21, 5, 55, 268, DateTimeKind.Local).AddTicks(5683),
                            ReplierId = 2023
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.PasswordChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordChangeRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<int>("StudentRecordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentRecordId");

                    b.ToTable("StudentAssignmentGrades");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            AssignmentId = 2024,
                            IsFinalized = false,
                            Point = 0,
                            StudentRecordId = 2024
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("StudentIdentification")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("StudentsRecords");

                    b.HasData(
                        new
                        {
                            Id = 2024,
                            ClassId = 2024,
                            FullName = "Xuan Hoang Vo",
                            StudentIdentification = "5037"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultProfilePictureHex")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPasswordNotSet")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("StudentIdentification")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2023,
                            DateCreated = new DateTime(2022, 1, 17, 21, 5, 55, 260, DateTimeKind.Local).AddTicks(3794),
                            DefaultProfilePictureHex = "",
                            Email = "vothienan306.work@outlook.com",
                            FirstName = "Kieu",
                            IsEmailConfirmed = false,
                            IsLocked = false,
                            IsPasswordNotSet = false,
                            LastName = "Nguyen Hoang",
                            PasswordHash = new byte[] { 63, 96, 155, 11, 90, 127, 2, 107, 227, 117, 99, 21, 138, 123, 141, 15, 52, 73, 218, 32, 88, 91, 92, 123, 8, 175, 40, 19, 25, 156, 86, 107, 248, 15, 234, 20, 136, 159, 90, 18, 116, 197, 91, 114, 206, 162, 11, 255, 171, 249, 29, 79, 105, 38, 152, 76, 255, 106, 69, 208, 108, 23, 246, 54 },
                            PasswordSalt = new byte[] { 82, 120, 200, 197, 116, 169, 188, 222, 249, 77, 194, 157, 195, 32, 16, 1, 144, 4, 133, 143, 163, 146, 209, 109, 40, 179, 94, 90, 202, 210, 126, 174, 64, 86, 87, 226, 85, 164, 196, 49, 138, 241, 32, 239, 153, 103, 126, 177, 176, 10, 254, 157, 193, 77, 234, 28, 184, 35, 231, 104, 193, 9, 183, 93, 15, 245, 41, 28, 78, 63, 51, 146, 200, 199, 44, 156, 252, 3, 31, 177, 155, 75, 105, 2, 57, 217, 77, 22, 168, 114, 237, 13, 123, 109, 161, 97, 159, 186, 142, 181, 210, 57, 223, 45, 184, 119, 81, 67, 163, 116, 252, 230, 18, 3, 199, 117, 145, 27, 19, 31, 52, 100, 169, 147, 233, 84, 119, 25 },
                            ProfilePictureUrl = ""
                        },
                        new
                        {
                            Id = 2024,
                            DateCreated = new DateTime(2022, 1, 17, 21, 5, 55, 266, DateTimeKind.Local).AddTicks(216),
                            DefaultProfilePictureHex = "",
                            Email = "themasteroftherain@protonmail.com",
                            FirstName = "Hoang",
                            IsEmailConfirmed = false,
                            IsLocked = false,
                            IsPasswordNotSet = false,
                            LastName = "Vo Xuan",
                            PasswordHash = new byte[] { 112, 216, 150, 109, 12, 16, 157, 53, 117, 217, 228, 43, 104, 49, 26, 24, 162, 88, 78, 160, 199, 211, 232, 105, 46, 35, 140, 141, 203, 234, 115, 212, 124, 255, 207, 61, 193, 100, 197, 218, 219, 165, 238, 149, 243, 23, 96, 111, 75, 118, 2, 141, 149, 31, 45, 91, 46, 6, 176, 250, 235, 60, 222, 135 },
                            PasswordSalt = new byte[] { 152, 115, 228, 38, 25, 219, 35, 220, 172, 154, 73, 241, 57, 202, 122, 225, 229, 192, 248, 152, 48, 174, 133, 31, 229, 31, 35, 60, 19, 111, 10, 68, 47, 167, 252, 117, 98, 99, 223, 110, 225, 247, 143, 95, 234, 112, 76, 246, 217, 137, 102, 160, 157, 99, 247, 164, 11, 48, 91, 209, 124, 112, 101, 219, 12, 137, 116, 84, 212, 105, 155, 81, 86, 248, 127, 248, 99, 90, 137, 206, 92, 159, 0, 30, 91, 28, 212, 80, 225, 122, 187, 141, 82, 232, 180, 33, 37, 175, 84, 113, 129, 80, 209, 248, 1, 179, 218, 104, 174, 159, 4, 6, 23, 152, 91, 60, 26, 224, 183, 116, 20, 233, 113, 58, 140, 176, 214, 212 },
                            ProfilePictureUrl = ""
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignmentGradeReviewRequestId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentGradeReviewRequestId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AccountConfirmationRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("AccountConfirmationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.StudentAssignmentGrade", "StudentAssignmentGrade")
                        .WithMany("AssignmentGradeReviewRequests")
                        .HasForeignKey("StudentAssignmentGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentAssignmentGrade");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "MainTeacher")
                        .WithMany()
                        .HasForeignKey("MainTeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MainTeacher");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassStudentsAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassStudentsAccounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Student")
                        .WithMany("ClassStudentsAccounts")
                        .HasForeignKey("StudentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassTeachersAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassTeachersAccounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Teacher")
                        .WithMany("ClassTeachersAccounts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ApplicationCore.Entity.GradeReviewReply", b =>
                {
                    b.HasOne("ApplicationCore.Entity.AssignmentGradeReviewRequest", "AssignmentGradeReviewRequest")
                        .WithMany("GradeReviewReplies")
                        .HasForeignKey("AssignmentGradeReviewRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Replier")
                        .WithMany("GradeReviewReplies")
                        .HasForeignKey("ReplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentGradeReviewRequest");

                    b.Navigation("Replier");
                });

            modelBuilder.Entity("ApplicationCore.Entity.PasswordChangeRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("PasswordChangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Assignment", "Assignment")
                        .WithMany("StudentAssignmentGrades")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.StudentRecord", "StudentRecord")
                        .WithMany("Grades")
                        .HasForeignKey("StudentRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("StudentRecord");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ApplicationCore.Entity.UserNotification", b =>
                {
                    b.HasOne("ApplicationCore.Entity.AssignmentGradeReviewRequest", "AssignmentGradeReviewRequest")
                        .WithMany()
                        .HasForeignKey("AssignmentGradeReviewRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entity.Assignment", "Assignment")
                        .WithMany("UserNotifications")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("AssignmentGradeReviewRequest");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.Navigation("StudentAssignmentGrades");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.Navigation("GradeReviewReplies");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.Navigation("ClassAssignments");

                    b.Navigation("ClassStudentsAccounts");

                    b.Navigation("ClassTeachersAccounts");

                    b.Navigation("Students");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.Navigation("AssignmentGradeReviewRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Navigation("AccountConfirmationRequests");

                    b.Navigation("ClassStudentsAccounts");

                    b.Navigation("ClassTeachersAccounts");

                    b.Navigation("GradeReviewReplies");

                    b.Navigation("PasswordChangeRequests");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
