// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220115041456_seed-admin-data")]
    partial class seedadmindata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ApplicationCore.Entity.AccountConfirmationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountConfirmationRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AdminAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdminAccounts");

                    b.HasData(
                        new
                        {
                            Id = 2022,
                            IsSuperAdmin = true,
                            PasswordHash = new byte[] { 53, 118, 170, 138, 130, 5, 13, 9, 140, 72, 7, 230, 18, 156, 52, 126, 11, 242, 124, 33, 194, 160, 37, 255, 35, 103, 242, 10, 119, 189, 154, 133, 124, 89, 131, 1, 17, 233, 43, 177, 45, 164, 150, 238, 70, 130, 173, 54, 122, 132, 166, 101, 204, 96, 69, 174, 89, 231, 143, 121, 137, 206, 48, 114 },
                            PasswordSalt = new byte[] { 211, 199, 31, 181, 155, 218, 12, 254, 97, 199, 177, 98, 178, 74, 204, 215, 231, 232, 33, 157, 90, 177, 155, 247, 227, 198, 55, 153, 37, 201, 3, 170, 6, 226, 118, 131, 60, 212, 35, 30, 22, 154, 105, 55, 25, 88, 160, 92, 150, 46, 217, 137, 208, 24, 227, 113, 206, 249, 171, 36, 219, 130, 203, 41, 157, 107, 127, 190, 169, 57, 244, 251, 141, 70, 151, 171, 65, 72, 41, 189, 209, 252, 218, 11, 226, 15, 135, 118, 242, 200, 44, 135, 213, 200, 151, 141, 103, 55, 139, 242, 22, 179, 242, 209, 104, 235, 71, 23, 233, 250, 167, 170, 86, 69, 28, 218, 81, 101, 186, 17, 197, 128, 70, 56, 175, 10, 46, 135 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("RequestState")
                        .HasColumnType("integer");

                    b.Property<int>("RequestedNewPoint")
                        .HasColumnType("integer");

                    b.Property<int>("StudentAssignmentGradeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentAssignmentGradeId");

                    b.ToTable("AssignmentGradeReviewRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("InviteStringStudent")
                        .HasColumnType("text");

                    b.Property<string>("InviteStringTeacher")
                        .HasColumnType("text");

                    b.Property<int?>("MainTeacherId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainTeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassStudentsAccount", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "StudentAccountId");

                    b.HasIndex("StudentAccountId");

                    b.ToTable("ClassStudentsAccounts");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassTeachersAccount", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassTeachersAccounts");
                });

            modelBuilder.Entity("ApplicationCore.Entity.GradeReviewReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignmentGradeReviewRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReplierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentGradeReviewRequestId");

                    b.HasIndex("ReplierId");

                    b.ToTable("GradeReviewReply");
                });

            modelBuilder.Entity("ApplicationCore.Entity.PasswordChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordChangeRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<int>("StudentRecordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentRecordId");

                    b.ToTable("StudentAssignmentGrades");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("StudentIdentification")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("StudentsRecords");
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DefaultProfilePictureHex")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPasswordNotSet")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("StudentIdentification")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationCore.Entity.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignmentGradeReviewRequestId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentGradeReviewRequestId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AccountConfirmationRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("AccountConfirmationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.StudentAssignmentGrade", "StudentAssignmentGrade")
                        .WithMany("AssignmentGradeReviewRequests")
                        .HasForeignKey("StudentAssignmentGradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentAssignmentGrade");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "MainTeacher")
                        .WithMany()
                        .HasForeignKey("MainTeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MainTeacher");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassStudentsAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassStudentsAccounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Student")
                        .WithMany("ClassStudentsAccounts")
                        .HasForeignKey("StudentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ApplicationCore.Entity.ClassTeachersAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("ClassTeachersAccounts")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Teacher")
                        .WithMany("ClassTeachersAccounts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ApplicationCore.Entity.GradeReviewReply", b =>
                {
                    b.HasOne("ApplicationCore.Entity.AssignmentGradeReviewRequest", "AssignmentGradeReviewRequest")
                        .WithMany("GradeReviewReplies")
                        .HasForeignKey("AssignmentGradeReviewRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "Replier")
                        .WithMany("GradeReviewReplies")
                        .HasForeignKey("ReplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentGradeReviewRequest");

                    b.Navigation("Replier");
                });

            modelBuilder.Entity("ApplicationCore.Entity.PasswordChangeRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("PasswordChangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Assignment", "Assignment")
                        .WithMany("StudentAssignmentGrades")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.StudentRecord", "StudentRecord")
                        .WithMany("Grades")
                        .HasForeignKey("StudentRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("StudentRecord");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ApplicationCore.Entity.UserNotification", b =>
                {
                    b.HasOne("ApplicationCore.Entity.AssignmentGradeReviewRequest", "AssignmentGradeReviewRequest")
                        .WithMany()
                        .HasForeignKey("AssignmentGradeReviewRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entity.Assignment", "Assignment")
                        .WithMany("UserNotifications")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entity.Class", "Class")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entity.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("AssignmentGradeReviewRequest");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Assignment", b =>
                {
                    b.Navigation("StudentAssignmentGrades");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.AssignmentGradeReviewRequest", b =>
                {
                    b.Navigation("GradeReviewReplies");
                });

            modelBuilder.Entity("ApplicationCore.Entity.Class", b =>
                {
                    b.Navigation("ClassAssignments");

                    b.Navigation("ClassStudentsAccounts");

                    b.Navigation("ClassTeachersAccounts");

                    b.Navigation("Students");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentAssignmentGrade", b =>
                {
                    b.Navigation("AssignmentGradeReviewRequests");
                });

            modelBuilder.Entity("ApplicationCore.Entity.StudentRecord", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ApplicationCore.Entity.User", b =>
                {
                    b.Navigation("AccountConfirmationRequests");

                    b.Navigation("ClassStudentsAccounts");

                    b.Navigation("ClassTeachersAccounts");

                    b.Navigation("GradeReviewReplies");

                    b.Navigation("PasswordChangeRequests");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
